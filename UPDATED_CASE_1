#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <ctype.h> // for toupper()

typedef struct Employee {
    char Employee_Number[11];
    char Employee_Name[16];
    char status_code;
    int hours_worked;
    float monthly_salary;
    float hourly_rate;
    float overtime_pay;
    float deductions;
    float net_pay;
} Employee;

int main() {
    Employee emp[5];
    FILE *fp;
    int i;
    const int n = 5;  // Fixed to 5 employees

    printf("You will input data for 5 employees.\n");

    for (i = 0; i < n; i++) {
        printf("\nEnter Employee %d Details:\n", i + 1);

        // Employee number
        printf("Employee Number (10 chars): ");
        scanf("%10s", emp[i].Employee_Number);
        while (getchar() != '\n'); // flush buffer

        // Employee name
        while (1) {
            printf("Employee Name (15 chars max): ");
            fgets(emp[i].Employee_Name, sizeof(emp[i].Employee_Name), stdin);
            if (strchr(emp[i].Employee_Name, '\n') == NULL) {
                while (getchar() != '\n');
            } else {
                emp[i].Employee_Name[strcspn(emp[i].Employee_Name, "\n")] = '\0';
            }

            if (strlen(emp[i].Employee_Name) > 0)
                break;
            printf("Invalid name. Please try again.\n");
        }

        // Status code
        while (1) {
        printf("Status Code (R for Regular, C for Casual): ");
        scanf(" %c", &emp[i].status_code);

        if (emp[i].status_code == 'R' || emp[i].status_code == 'r' ||
        emp[i].status_code == 'C' || emp[i].status_code == 'c') {   
            while (getchar() != '\n'); 
        break;
        } else {
        printf("Invalid status code. Please enter R or C only.\n");
        while (getchar() != '\n'); // Clear extra input (e.g., "abc\n")
        }
        
    }


        // Hours worked
        while (1) {
            printf("Total Hours Worked This Month: ");
            if (scanf("%d", &emp[i].hours_worked) != 1 || emp[i].hours_worked < 0) {
                printf("Invalid input. Please enter a non-negative number.\n");
                while (getchar() != '\n');
            } else {
                break;
            }
        }

        // Monthly salary
        while (1) {
            printf("Basic Salary (Monthly): ");
            if (scanf("%f", &emp[i].monthly_salary) != 1 || emp[i].monthly_salary < 0) {
                printf("Invalid input. Salary cannot be negative. Please try again.\n");
                while (getchar() != '\n');
            } else {
                break;
            }
        }

        // Deductions
        while (1) {
            printf("Total Monthly Deductions: ");
            if (scanf("%f", &emp[i].deductions) != 1 || emp[i].deductions < 0) {
                printf("Invalid input. Deductions cannot be negative. Please try again.\n");
                while (getchar() != '\n');
            } else {
                break;
            }
        }

        // Calculations
        emp[i].hourly_rate = emp[i].monthly_salary / 160.0;
        if (emp[i].hours_worked > 160) {
            int overtime = emp[i].hours_worked - 160;
            emp[i].overtime_pay = overtime * (emp[i].hourly_rate * 1.5f);
        } else {
            emp[i].overtime_pay = 0;
        }

        emp[i].net_pay = emp[i].monthly_salary + emp[i].overtime_pay - emp[i].deductions;
    }

    // Open file in write mode (overwrites existing content)
    fp = fopen("TOTAL_EMPLOYEES.txt", "w");
    if (fp == NULL) {
        printf("Error opening file!\n");
        return 1;
    }

    // Write header
    fprintf(fp, "                            ORIGINAL WEND'S CORPORATION\n");
    fprintf(fp, "                                QUEZON \n");
    fprintf(fp, "                                 City\n\n");
    fprintf(fp, "                                Payroll\n\n");
    fprintf(fp, "Employee     Employee         Status    Basic     Overtime  Deductions   Net\n");
    fprintf(fp, "Number       Name                       Salary       Pay                 Pay\n");
    fprintf(fp, "-------------------------------------------------------------------------------\n");

    // Write employee data
    for (i = 0; i < n; i++) {
        char statusStr[10];
        if (emp[i].status_code == 'R')
            strcpy(statusStr, "Regular");
        else if (emp[i].status_code == 'C')
            strcpy(statusStr, "Casual");
        else
            strcpy(statusStr, "Undecided");

        fprintf(fp, "%-12s %-16s %-8s %9.2f %10.2f %11.2f %9.2f\n",
                emp[i].Employee_Number,
                emp[i].Employee_Name,
                statusStr,
                emp[i].monthly_salary,
                emp[i].overtime_pay,
                emp[i].deductions,
                emp[i].net_pay);
    }

    fclose(fp);
    printf("\nPayroll written to TOTAL_EMPLOYEES.txt successfully.\n");

    return 0;
}
