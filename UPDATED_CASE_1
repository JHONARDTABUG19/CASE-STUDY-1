#include <stdio.h>   // For standard input/output functions like printf, scanf, fopen, fprintf)
#include <stdlib.h>  // For malloc, free, etc
#include <string.h>  // For string operations like strcpy, strlen, strchr, strcspn
#include <ctype.h>   // Required for isalpha(), isdigit()

// Define a structure to store employee details
typedef struct Employee {
    char Employee_Number[11];     // Employee ID (max 10 characters + null terminator)
    char Employee_Name[16];       // Employee name (max 15 characters + null terminator)
    char status_code;             // 'R' for Regular, 'C' for Casual
    int hours_worked;             // Total hours worked for the month
    float monthly_salary;         // Basic monthly salary
    float hourly_rate;            // Computed hourly rate
    float overtime_pay;           // Computed overtime pay
    float deductions;             // Monthly deductions
    float net_pay;                // Final computed net pay
} Employee;

int main() {
    Employee emp[5];              // Array to store data of 5 employees
    FILE *fp;
    int i;
    const int n = 5;              // Fixed number of employees

    printf("You will input data for 5 employees.\n");

    for (i = 0; i < n; i++) {
        printf("\nEnter Employee %d Details:\n", i + 1);

        // Get employee number (max 10 characters) and validate for digits only
        while (1) {

            char temp_employee_number[100]; // Use a larger buffer for input to prevent overflow issues with scanf
            printf("Employee Number (10 chars, digits only): ");
            scanf("%99s", temp_employee_number); // Read as string, limit to 99 chars to leave space for null terminator

            // Clear input buffer
            while (getchar() != '\n');

            int if_is_numeric = 1; // Flag to check if the input is purely numeric
            if (strlen(temp_employee_number) == 0) {
                if_is_numeric = 0; // Empty string is not valid
            } else {
                for (int j = 0; temp_employee_number[j] != '\0'; j++) {
                    if (!isdigit(temp_employee_number[j])) {
                        if_is_numeric = 0; // Found a non-digit character
                        break;
                    }
                }
            }

            // Check if the length exceeds 10 characters after validation
            if (strlen(temp_employee_number) > 10) {
                printf("Employee Number exceeds 10 characters. Please enter up to 10 digits.\n");
                if_is_numeric = 0; // Mark as invalid if too long
            }


            if (if_is_numeric) {
                strcpy(emp[i].Employee_Number, temp_employee_number); // Copy valid input
                break; // Exit the loop if valid
            } else {
                printf("Invalid Employee Number. Please enter digits only (up to 10 characters).\n");
            }
        }


        // Get employee name safely using fgets
        while (1) {
            printf("Employee Name (15 chars max, letters only): ");
            fgets(emp[i].Employee_Name, sizeof(emp[i].Employee_Name), stdin);

            // Remove newline if present; otherwise flush remaining input
            if (strchr(emp[i].Employee_Name, '\n') == NULL) {
                while (getchar() != '\n');
            } else {
                emp[i].Employee_Name[strcspn(emp[i].Employee_Name, "\n")] = '\0';
            }

            // Check if ALL characters are letters AND the name is not empty
            int validity_of_name = 1; // Flag to indicate if the name is valid
            if (strlen(emp[i].Employee_Name) == 0) { // Check for empty string first
                validity_of_name = 0;
            } else {
                for (int j = 0; emp[i].Employee_Name[j] != '\0'; j++) {
                    if (!isalpha(emp[i].Employee_Name[j])) { // If *not* a letter
                        validity_of_name = 0; // Mark as invalid
                        break;           // No need to check further
                    }
                }
            }

            if (validity_of_name) {
                break; // Exit the loop if the name is valid
            }
            printf("Invalid name. Please enter a name that contains ONLY letters (no numbers, spaces, or special characters).\n");
        }


        // Validate status code (R/r or C/c only)
        while (1) {
            printf("Status Code (R for Regular, C for Casual): ");
            scanf(" %c", &emp[i].status_code);

            // Check if valid, then flush input
            if (emp[i].status_code == 'R' || emp[i].status_code == 'r' ||
                emp[i].status_code == 'C' || emp[i].status_code == 'c') {
                while (getchar() != '\n'); // Flush remaining input
                break;
            } else {
                printf("Invalid status code. Please enter R or C only.\n");
                while (getchar() != '\n'); // Flush wrong input
            }
        }

        // Validate hours worked
        while (1) {
            printf("Total Hours Worked This Month: ");
            if (scanf("%d", &emp[i].hours_worked) != 1 || emp[i].hours_worked < 0) {
                printf("Invalid input. Please enter a non-negative number.\n");
                while (getchar() != '\n'); // Flush input
            } else {
                break;
            }
        }

        // Validate monthly salary
        while (1) {
            printf("Basic Salary (Monthly): ");
            if (scanf("%f", &emp[i].monthly_salary) != 1 || emp[i].monthly_salary < 0) {
                printf("Invalid input. Salary cannot be negative. Please try again.\n");
                while (getchar() != '\n'); // Flush input
            } else {
                break;
            }
        }

        // Validate deductions
        while (1) {
            printf("Total Monthly Deductions: ");
            if (scanf("%f", &emp[i].deductions) != 1 || emp[i].deductions < 0) {
                printf("Invalid input. Deductions cannot be negative. Please try again.\n");
                while (getchar() != '\n'); // Flush input
            } else {
                break;
            }
        }

        // Compute hourly rate and overtime
        emp[i].hourly_rate = emp[i].monthly_salary / 160.0;
        if (emp[i].hours_worked > 160) {
            int overtime = emp[i].hours_worked - 160;
            emp[i].overtime_pay = overtime * (emp[i].hourly_rate * 1.5f);
        } else {
            emp[i].overtime_pay = 0;
        }

        // Compute net pay
        emp[i].net_pay = emp[i].monthly_salary + emp[i].overtime_pay - emp[i].deductions;
    }

    // Open text file in write mode ("w" = overwrite)
    fp = fopen("FINALLYY.txt", "w"); // Changed to FINALLYY.txt as per original code
    if (fp == NULL) {
        printf("Error opening file!\n");
        return 1;
    }

    // Write file header
    fprintf(fp, "                            ORIGINAL WEND'S CORPORATION\n");
    fprintf(fp, "                                QUEZON \n");
    fprintf(fp, "                                 City\n\n");
    fprintf(fp, "                                Payroll\n\n");
    fprintf(fp, "Employee     Employee         Status    Basic     Overtime  Deductions   Net\n");
    fprintf(fp, "Number       Name                       Salary       Pay                 Pay\n");
    fprintf(fp, "-------------------------------------------------------------------------------\n");

    // Write all employee data to the file
    for (i = 0; i < n; i++) {
        char statusStr[10];

        // Map status code to full word
        if (emp[i].status_code == 'R' || emp[i].status_code == 'r')
            strcpy(statusStr, "Regular");
        else if (emp[i].status_code == 'C' || emp[i].status_code == 'c')
            strcpy(statusStr, "Casual");
        else
            strcpy(statusStr, "Undecided"); // Fallback for unexpected status code

        // Format and write employee record
        fprintf(fp, "%-12s %-16s %-8s %9.2f %10.2f %11.2f %9.2f\n",
                emp[i].Employee_Number,
                emp[i].Employee_Name,
                statusStr,
                emp[i].monthly_salary,
                emp[i].overtime_pay,
                emp[i].deductions,
                emp[i].net_pay);
    }

    fclose(fp); // Close file after writing
    printf("\nPayroll written to FINALLYY.txt successfully.\n"); // Changed to FINALLYY.txt

    return 0;
}
